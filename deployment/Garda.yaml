apiVersion: v1
kind: Namespace
metadata:
  name: garda
  labels:
    apps: oauth
  annotations:
    env: dev
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: garda-vol
  namespace: garda
  labels:
    type: local
spec: 
  storageClassName: local-storage
  local:
    path: /mnt/volumes/garda
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - learn-virtual-dev
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: garda
  name: garda-claim
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: garda
  namespace: garda
  labels:
    app: garda
    platform: oauth
    release: '0.1'
  annotations:
    env: dev
    monitoring: 'true'
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: garda
  template:
    metadata:
      labels:
        app: garda
    spec:
      volumes:
        - name: garda-vol
          persistentVolumeClaim:
            claimName: garda-claim
      containers:
        - image: "registry.learn-virtual.com:5000/garda"
          imagePullPolicy: Always
          name: garda
          ports:
            - containerPort: 80
        - image: "registry.learn-virtual.com:5000/pg-garda"
          imagePullPolicy: Always
          name: pg-garda
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: garda-vol
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: garda
  name: garda-service
  namespace: garda
spec:
  ports:
  - nodePort: 30500
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: garda
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: garda-ingress
  namespace: garda
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: 
      http:
        paths:
        - path: /auth
          backend:
            serviceName: garda-service
            servicePort: 80
        - path: /token
          backend:
            serviceName: garda-service
            servicePort: 80
